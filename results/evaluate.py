import json
import os
import requests
from dotenv import dotenv_values

# --- üõ†Ô∏è Gemini API Setup ---
# Load API keys from .env file
# ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≠‡∏ô‡∏ü‡∏¥‡∏Å‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå .env
config = dotenv_values(".env")
GEMINI_API_KEY = config.get("GEMINI_API_KEY")

# --- ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç: ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç URL ‡∏Ç‡∏≠‡∏á API Endpoint ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ---
# ‡∏ú‡∏°‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏à‡∏≤‡∏Å generativeai.googleapis.com ‡πÄ‡∏õ‡πá‡∏ô generativelanguage.googleapis.com
# ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô endpoint ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Gemini API ‡∏Ñ‡∏£‡∏±‡∏ö
GEMINI_API_ENDPOINT = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={GEMINI_API_KEY}"

def get_gemini_response(prompt: str) -> str:
    """Sends a prompt to the Gemini API and returns the text response."""
    if not GEMINI_API_KEY:
        error_message = "Error: GEMINI_API_KEY not found. Please create a .env file and add your API key."
        print(error_message)
        return ""

    headers = {
        "Content-Type": "application/json"
    }
    data = {
        "contents": [
            {
                "parts": [
                    {
                        "text": prompt
                    }
                ]
            }
        ]
    }
    try:
        response = requests.post(GEMINI_API_ENDPOINT, headers=headers, json=data)
        response.raise_for_status()  # Raise an exception for bad status codes (4xx or 5xx)
        result = response.json()
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡∏ß‡πà‡∏≤‡∏°‡∏µ candidate ‡πÅ‡∏•‡∏∞ part ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡∏π‡πà‡∏à‡∏£‡∏¥‡∏á
        if 'candidates' in result and result['candidates'][0]['content']['parts'][0]['text']:
            return result['candidates'][0]['content']['parts'][0]['text']
        else:
            print("Error: Invalid response format from Gemini API.")
            print("Raw response:", result)
            return ""
            
    except requests.exceptions.RequestException as e:
        print(f"Error calling Gemini API: {e}")
        # ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏≠‡∏á response ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
        if e.response is not None:
            print(f"Response Body: {e.response.text}")
        return ""

# --- üß† Ground Truth Generation (Using Gemini as the 'leader') ---
def generate_ground_truth(headline: str, content: str, guide: str):
    """Generates ground truth summary and impact using the Gemini API."""
    worker_summary_prompt = f"""
    Based on the following news headline and content, write a concise financial news summary and a financial analysis.

    Headline: "{headline}"
    Content: "{content}"

    Your output MUST be a valid JSON object with two keys:
    - "worker_summary": A summary of the news.
    - "impact_trend": A concise analysis of the financial impact (e.g., "Positive," "Negative," or "Neutral") and the reasoning.
    """
    
    try:
        response_text = get_gemini_response(worker_summary_prompt)
        if not response_text:
            return None
        
        # Attempt to parse the response as JSON. Gemini might add markdown, so we clean it.
        # ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î response ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏°‡∏µ markdown ‡∏õ‡∏ô‡∏°‡∏≤
        cleaned_response = response_text.strip().lstrip("```json").rstrip("```").strip()
        return json.loads(cleaned_response)
    except json.JSONDecodeError as e:
        print(f"Failed to parse JSON from Gemini response: {e}")
        print(f"Raw response received: '{response_text}'")
        return None
    except Exception as e:
        print(f"An unexpected error occurred in generate_ground_truth: {e}")
        return None

# --- üìù Ground Truth Data (Initial Set) ---
# ‡∏™‡∏£‡πâ‡∏≤‡∏á Ground Truth ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
print("Generating ground truth from Gemini API...")
GROUND_TRUTH = {
    "If you're looking for a gaming laptop on a budget, this is it":
        generate_ground_truth(
            "If you're looking for a gaming laptop on a budget, this is it",
            "Save $290 off retail for a limited time",
            "NVIDIA AMD INTEL revenue profit EPS margins growth rates quarterly yearly earnings reports guidance mergers product launches financial news"
        )
}
print("Ground truth generated successfully.")

# --- üìä Quantitative Evaluation ---
def evaluate_quantitative(results):
    """
    Evaluates worker summaries and impact trends quantitatively.
    This function uses ROUGE for summarization and a simple string comparison for the impact trend.
    """
    try:
        from rouge_score import rouge_scorer
        scorer = rouge_scorer.RougeScorer(['rouge1', 'rouge2', 'rougeL'], use_stemmer=True)
    except ImportError:
        print("Please install the rouge-score library: pip install rouge-score")
        return []

    scores = []
    for r in results:
        headline = r["headline"]
        worker_summary = r["worker_summary"]
        worker_impact = r["impact_trend"]
        
        # Get ground truth from the pre-generated set
        gold_data = GROUND_TRUTH.get(headline)
        if not gold_data:
            print(f"Warning: No ground truth found for headline: '{headline}'")
            continue

        gold_summary = gold_data.get("worker_summary", "")
        gold_impact_raw = gold_data.get("impact_trend", "") # ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô dict
        
        # --- FIX for AttributeError ---
        # ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å Gemini API ‡∏≠‡∏≤‡∏à tr·∫£ l·ªùi JSON object (dict ‡πÉ‡∏ô Python)
        # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ü‡∏¥‡∏•‡∏î‡πå "impact_trend" ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô string ‡∏ò‡∏£‡∏£‡∏°‡∏î‡∏≤
        # ‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏à‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á gold_impact_raw ‡∏Å‡πà‡∏≠‡∏ô ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô dictionary
        # ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏ò‡∏≠‡∏î .strip() ‡∏ö‡∏ô dict
        gold_impact = ""
        if isinstance(gold_impact_raw, str):
            gold_impact = gold_impact_raw
        elif isinstance(gold_impact_raw, dict):
            # ‡∏´‡∏≤‡∏Å‡πÄ‡∏õ‡πá‡∏ô dictionary ‡πÉ‡∏´‡πâ‡∏£‡∏ß‡∏°‡∏Ñ‡πà‡∏≤ value ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô string ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
            # ‡∏ô‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î‡∏à‡∏≤‡∏Å LLM
            gold_impact = " - ".join(str(v) for v in gold_impact_raw.values())

        # Calculate ROUGE score for the summary
        rouge_scores = scorer.score(gold_summary, worker_summary) # gold standard is the first argument
        
        # Calculate a simple binary score for the impact trend
        # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ gold_impact ‡πÄ‡∏õ‡πá‡∏ô string ‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞ .strip() ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        impact_match_score = 1.0 if worker_impact.strip().lower() == gold_impact.strip().lower() else 0.0

        scores.append({
            "headline": headline,
            "rouge_score": {
                "rouge1": rouge_scores['rouge1'].fmeasure,
                "rouge2": rouge_scores['rouge2'].fmeasure,
                "rougeL": rouge_scores['rougeL'].fmeasure
            },
            "impact_match_score": impact_match_score,
            "worker_summary": worker_summary,
            "gold_summary": gold_summary,
            "worker_impact": worker_impact,
            "gold_impact": gold_impact
        })
    return scores

# --- üîé Qualitative Evaluation ---
def evaluate_qualitative(results, n=3):
    """
    Performs a qualitative inspection by printing a sample of the results.
    """
    print("\n=== Qualitative Evaluation (Sample outputs) ===")
    for r in results[:n]:
        headline = r['headline']
        worker_summary = r['worker_summary']
        worker_impact = r['impact_trend']
        
        gold_data = GROUND_TRUTH.get(headline)
        if not gold_data:
            continue
            
        gold_summary = gold_data.get("worker_summary", "N/A")
        gold_impact = gold_data.get("impact_trend", "N/A")
        
        print(f"\nHeadline: {headline}")
        print("-" * (len(headline) + 10))
        print(f"Predicted Summary: {worker_summary}")
        print(f"Gold Standard Summary: {gold_summary}")
        print(f"Predicted Impact: {worker_impact}")
        print(f"Gold Standard Impact: {gold_impact}")
    print("\n")

# --- üöÄ Main Execution ---
if __name__ == "__main__":
    # This is a sample result from your worker process.
    worker_results = [
        {
            "headline": "If you're looking for a gaming laptop on a budget, this is it",
            "content": "Save $290 off retail for a limited time",
            "guide": "NVIDIA AMD INTEL revenue profit EPS margins growth rates quarterly yearly earnings reports guidance mergers product launches financial news",
            # ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏à‡∏≤‡∏Å Worker ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏ô‡∏≥‡∏°‡∏≤‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö Ground Truth ‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏î‡∏¢ Gemini
            "worker_summary": "A gaming laptop is available at a discounted price, offering a saving of $290 for a limited period. This deal targets budget-conscious gamers.",
            "impact_trend": "Neutral - This is a product-specific discount and does not directly reflect the financial performance of major chip manufacturers like NVIDIA, AMD, or Intel."
        }
    ]

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Ground Truth ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏Å‡πà‡∏≠‡∏ô‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡πà‡∏≠
    if GROUND_TRUTH.get("If you're looking for a gaming laptop on a budget, this is it"):
        # Run quantitative evaluation
        q_scores = evaluate_quantitative(worker_results)
        print("\n=== Quantitative Evaluation Results ===")
        print(json.dumps(q_scores, indent=2, ensure_ascii=False))

        # Run qualitative evaluation
        evaluate_qualitative(worker_results)
    else:
        print("\nCould not perform evaluation because ground truth generation failed.")

